# A one-dimensional cellular automata takes in a string, which in our 
# case, consists of the characters '.' and 'x', and changes it according 
# to some predetermined rules. The rules consider three characters, which 
# are a character at position k and its two neighbours, and determine 
# what the character at the corresponding position k will be in the new 
# string.

# For example, if the character at position k in the string  is '.' and 
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up 
# '..x' in the table below. In the table, '..x' corresponds to 'x' which 
# means that in the new string, 'x' will be at position k.

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work 
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all 
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position 
# in the string.

# a procedure, cellular_automaton, that takes three inputs: 
#     a non-empty string, 
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and 
#     a positive integer, n, which is the number of generations. 
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

def cellular_automaton(string, pattern_number, gen_number):  
    pattern = generate_pattern(pattern_number)
    current_gen = string

    while (gen_number > 0):
        print(current_gen)
        current_gen = generate_single_automaton(pattern, current_gen)
        gen_number -= 1
    return current_gen        

def generate_single_automaton(pattern, string):
    arr = []
    rule = ''
	
    for i in range(len(string)):
        
        if i == 0:
            rule = (string[-1] + string[i:i+2])
        elif i == len(string) - 1:
            rule = (string[i-1:i+1] + string[0])
        else:
            rule = (string[i-1:i+2])
            
        while len(rule) < 3:
            rule = rule + rule[0]

        for ru, pat in pattern.items():
            if rule.lower() == pat[0]:
                arr.append(pat[1])
             
    return ''.join(arr)       

def populate_base_arr():
    base_dict = {}    
    base_dict[1] = ['...', '.']
    base_dict[2] = ['..x', '.']
    base_dict[4] = ['.x.', '.']
    base_dict[8] = ['.xx', '.']
    base_dict[16] = ['x..', '.']
    base_dict[32] = ['x.x', '.']
    base_dict[64] = ['xx.', '.']
    base_dict[128] = ['xxx', '.']
    return base_dict               
    
def generate_pattern(n):
    base_dict = populate_base_arr()
    for key in sorted(base_dict)[::-1]:
        if key <= n:
            n -= key
            base_dict[key][1] = 'x'            
    return base_dict
	
	
print cellular_automaton('..............................X..............................', 30, 50)